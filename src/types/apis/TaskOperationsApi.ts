/**
 * Howso API
 * OpenAPI implementation for interacting with the Howso API. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AsyncAction,
  AsyncActionCancel,
  AsyncActionOutput,
  AsyncActionStatus,
} from '../models';
import {
    AsyncActionFromJSON,
    AsyncActionCancelFromJSON,
    AsyncActionOutputFromJSON,
    AsyncActionStatusFromJSON,
} from '../models';

export interface CancelActionRequest {
    action_id: string;
}

export interface GetActionRequest {
    action_id: string;
}

export interface GetActionOutputRequest {
    action_id: string;
}

export interface ListPendingActionsRequest {
    search?: string;
    ordering?: string;
}

export interface ListPendingTraineeActionsRequest {
    trainee_id: string;
    search?: string;
    ordering?: string;
}

/**
 * 
 */
export class TaskOperationsApi extends runtime.BaseAPI {

    /**
     * Cancel and stop processing an async action.
     * Cancel an async action
     */
    async cancelActionRaw(requestParameters: CancelActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| AsyncActionCancel>> {
        if (requestParameters.action_id === null || requestParameters.action_id === undefined) {
            throw new runtime.RequiredError('action_id','Required parameter requestParameters.action_id was null or undefined when calling cancelAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/operations/actions/{action_id}/cancel`.replace(`{${"action_id"}}`, encodeURIComponent(String(requestParameters.action_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AsyncActionCancelFromJSON(jsonValue));
    }

    /**
     * Cancel and stop processing an async action.
     * Cancel an async action
     */
    async cancelAction(action_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| AsyncActionCancel> {
        const response = await this.cancelActionRaw({ action_id: action_id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the status of an async action.
     * Status of an async action
     */
    async getActionRaw(requestParameters: GetActionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| AsyncAction>> {
        if (requestParameters.action_id === null || requestParameters.action_id === undefined) {
            throw new runtime.RequiredError('action_id','Required parameter requestParameters.action_id was null or undefined when calling getAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/operations/actions/{action_id}`.replace(`{${"action_id"}}`, encodeURIComponent(String(requestParameters.action_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AsyncActionFromJSON(jsonValue));
    }

    /**
     * Retrieve the status of an async action.
     * Status of an async action
     */
    async getAction(action_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| AsyncAction> {
        const response = await this.getActionRaw({ action_id: action_id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the output of an async action.
     * Output of an async action
     */
    async getActionOutputRaw(requestParameters: GetActionOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| AsyncActionOutput| AsyncActionStatus>> {
        if (requestParameters.action_id === null || requestParameters.action_id === undefined) {
            throw new runtime.RequiredError('action_id','Required parameter requestParameters.action_id was null or undefined when calling getActionOutput.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/operations/actions/{action_id}/output`.replace(`{${"action_id"}}`, encodeURIComponent(String(requestParameters.action_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (response.status === 202) {
            return new runtime.JSONApiResponse(response, (jsonValue) => AsyncActionStatusFromJSON(jsonValue));
        }
        return new runtime.JSONApiResponse(response, (jsonValue) => AsyncActionOutputFromJSON(jsonValue));
    }

    /**
     * Retrieve the output of an async action.
     * Output of an async action
     */
    async getActionOutput(action_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| AsyncActionOutput| AsyncActionStatus> {
        const response = await this.getActionOutputRaw({ action_id: action_id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of pending asynchronous actions against the API started by the requesting user. 
     * List pending async actions.
     */
    async listPendingActionsRaw(requestParameters: ListPendingActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Array<AsyncAction>>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/operations/actions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AsyncActionFromJSON));
    }

    /**
     * Retrieve list of pending asynchronous actions against the API started by the requesting user. 
     * List pending async actions.
     */
    async listPendingActions(search?: string, ordering?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Array<AsyncAction>> {
        const response = await this.listPendingActionsRaw({ search: search, ordering: ordering }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve list of pending asynchronous actions for a trainee started by the requesting user. 
     * List pending trainee async actions.
     */
    async listPendingTraineeActionsRaw(requestParameters: ListPendingTraineeActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Array<AsyncAction>>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling listPendingTraineeActions.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/actions`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AsyncActionFromJSON));
    }

    /**
     * Retrieve list of pending asynchronous actions for a trainee started by the requesting user. 
     * List pending trainee async actions.
     */
    async listPendingTraineeActions(trainee_id: string, search?: string, ordering?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Array<AsyncAction>> {
        const response = await this.listPendingTraineeActionsRaw({ trainee_id: trainee_id, search: search, ordering: ordering }, initOverrides);
        return await response.value();
    }

}
