/**
 * Howso API
 * OpenAPI implementation for interacting with the Howso API. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AsyncActionAccepted,
  DistancesRequest,
  DistancesResponse,
  PairwiseDistancesRequest,
} from '../models';
import {
    AsyncActionAcceptedFromJSON,
    DistancesRequestToJSON,
    DistancesResponseFromJSON,
    PairwiseDistancesRequestToJSON,
} from '../models';

export interface DistancesOperationRequest {
    trainee_id: string;
    DistancesRequest: DistancesRequest;
}

export interface PairwiseDistancesOperationRequest {
    trainee_id: string;
    PairwiseDistancesRequest: PairwiseDistancesRequest;
}

/**
 * 
 */
export class TraineeMetricsApi extends runtime.BaseAPI {

    /**
     * Returns computed distances between all cases specified in `case_indices` or from all cases in local model as defined by `feature_values`. If neither `case_indices` nor `feature_values` is specified, returns computed distances for the entire dataset. 
     * Computes distances matrix.
     */
    async distancesRaw(requestParameters: DistancesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| DistancesResponse>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling distances.');
        }

        if (requestParameters.DistancesRequest === null || requestParameters.DistancesRequest === undefined) {
            throw new runtime.RequiredError('DistancesRequest','Required parameter requestParameters.DistancesRequest was null or undefined when calling distances.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/metrics/distances`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DistancesRequestToJSON(requestParameters.DistancesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistancesResponseFromJSON(jsonValue));
    }

    /**
     * Returns computed distances between all cases specified in `case_indices` or from all cases in local model as defined by `feature_values`. If neither `case_indices` nor `feature_values` is specified, returns computed distances for the entire dataset. 
     * Computes distances matrix.
     */
    async distances(trainee_id: string, DistancesRequest: DistancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| DistancesResponse> {
        const response = await this.distancesRaw({ trainee_id: trainee_id, DistancesRequest: DistancesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Returns computed distances between each respective pair of cases specified in either `from_values` or `from_case_indices` to `to_values` or `to_case_indices`. If only one case is specified in any of the lists, all respective distances are computed to/from that one case. 
     * Computes pairwise distances for specified from and to cases or values.
     */
    async pairwiseDistancesRaw(requestParameters: PairwiseDistancesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| AsyncActionAccepted>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling pairwiseDistances.');
        }

        if (requestParameters.PairwiseDistancesRequest === null || requestParameters.PairwiseDistancesRequest === undefined) {
            throw new runtime.RequiredError('PairwiseDistancesRequest','Required parameter requestParameters.PairwiseDistancesRequest was null or undefined when calling pairwiseDistances.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/metrics/pairwise-distances`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PairwiseDistancesRequestToJSON(requestParameters.PairwiseDistancesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AsyncActionAcceptedFromJSON(jsonValue));
    }

    /**
     * Returns computed distances between each respective pair of cases specified in either `from_values` or `from_case_indices` to `to_values` or `to_case_indices`. If only one case is specified in any of the lists, all respective distances are computed to/from that one case. 
     * Computes pairwise distances for specified from and to cases or values.
     */
    async pairwiseDistances(trainee_id: string, PairwiseDistancesRequest: PairwiseDistancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| AsyncActionAccepted> {
        const response = await this.pairwiseDistancesRaw({ trainee_id: trainee_id, PairwiseDistancesRequest: PairwiseDistancesRequest }, initOverrides);
        return await response.value();
    }

}
