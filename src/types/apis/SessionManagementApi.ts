/**
 * Howso API
 * OpenAPI implementation for interacting with the Howso API. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BeginSessionRequest,
  Session,
  UpdateSessionRequest,
} from '../models';
import {
    BeginSessionRequestToJSON,
    SessionFromJSON,
    UpdateSessionRequestToJSON,
} from '../models';

export interface BeginSessionOperationRequest {
    BeginSessionRequest: BeginSessionRequest;
}

export interface GetSessionRequest {
    session_id: string;
}

export interface ListSessionsRequest {
    search?: string;
    project?: string;
}

export interface UpdateSessionOperationRequest {
    session_id: string;
    UpdateSessionRequest: UpdateSessionRequest;
}

/**
 * 
 */
export class SessionManagementApi extends runtime.BaseAPI {

    /**
     * Begins a new model session.
     * Start a new session.
     */
    async beginSessionRaw(requestParameters: BeginSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Session>> {
        if (requestParameters.BeginSessionRequest === null || requestParameters.BeginSessionRequest === undefined) {
            throw new runtime.RequiredError('BeginSessionRequest','Required parameter requestParameters.BeginSessionRequest was null or undefined when calling beginSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BeginSessionRequestToJSON(requestParameters.BeginSessionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Begins a new model session.
     * Start a new session.
     */
    async beginSession(BeginSessionRequest: BeginSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Session> {
        const response = await this.beginSessionRaw({ BeginSessionRequest: BeginSessionRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Get your connection\'s active model session.
     * Get active session.
     */
    async getActiveSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/session`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Get your connection\'s active model session.
     * Get active session.
     */
    async getActiveSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Session> {
        const response = await this.getActiveSessionRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get details about a given session.
     * Get a session\'s details.
     */
    async getSessionRaw(requestParameters: GetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Session>> {
        if (requestParameters.session_id === null || requestParameters.session_id === undefined) {
            throw new runtime.RequiredError('session_id','Required parameter requestParameters.session_id was null or undefined when calling getSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/manage/sessions/{session_id}/`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.session_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Get details about a given session.
     * Get a session\'s details.
     */
    async getSession(session_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Session> {
        const response = await this.getSessionRaw({ session_id: session_id }, initOverrides);
        return await response.value();
    }

    /**
     * List all of your model sessions.
     * List your sessions.
     */
    async listSessionsRaw(requestParameters: ListSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Array<Session>>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/manage/sessions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionFromJSON));
    }

    /**
     * List all of your model sessions.
     * List your sessions.
     */
    async listSessions(search?: string, project?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Array<Session>> {
        const response = await this.listSessionsRaw({ search: search, project: project }, initOverrides);
        return await response.value();
    }

    /**
     * Update details of a specified session.
     * Update a session.
     */
    async updateSessionRaw(requestParameters: UpdateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Session>> {
        if (requestParameters.session_id === null || requestParameters.session_id === undefined) {
            throw new runtime.RequiredError('session_id','Required parameter requestParameters.session_id was null or undefined when calling updateSession.');
        }

        if (requestParameters.UpdateSessionRequest === null || requestParameters.UpdateSessionRequest === undefined) {
            throw new runtime.RequiredError('UpdateSessionRequest','Required parameter requestParameters.UpdateSessionRequest was null or undefined when calling updateSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/manage/sessions/{session_id}/`.replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.session_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSessionRequestToJSON(requestParameters.UpdateSessionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionFromJSON(jsonValue));
    }

    /**
     * Update details of a specified session.
     * Update a session.
     */
    async updateSession(session_id: string, UpdateSessionRequest: UpdateSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Session> {
        const response = await this.updateSessionRaw({ session_id: session_id, UpdateSessionRequest: UpdateSessionRequest }, initOverrides);
        return await response.value();
    }

}
