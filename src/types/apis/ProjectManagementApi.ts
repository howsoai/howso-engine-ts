/**
 * Howso API
 * OpenAPI implementation for interacting with the Howso API. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Project,
  ProjectIdentity,
} from '../models';
import {
    ProjectFromJSON,
    ProjectIdentityToJSON,
} from '../models';

export interface CreateProjectRequest {
    ProjectIdentity: ProjectIdentity;
}

export interface DeleteProjectRequest {
    project_id: string;
}

export interface GetProjectRequest {
    project_id: string;
}

export interface ListProjectsRequest {
    search?: string;
}

export interface UpdateProjectRequest {
    project_id: string;
    ProjectIdentity: ProjectIdentity;
}

/**
 * 
 */
export class ProjectManagementApi extends runtime.BaseAPI {

    /**
     * Create a new project.
     * Create a project.
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Project>> {
        if (requestParameters.ProjectIdentity === null || requestParameters.ProjectIdentity === undefined) {
            throw new runtime.RequiredError('ProjectIdentity','Required parameter requestParameters.ProjectIdentity was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["project:write"]);
        }

        const response = await this.request({
            path: `/v2/manage/projects/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectIdentityToJSON(requestParameters.ProjectIdentity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Create a new project.
     * Create a project.
     */
    async createProject(ProjectIdentity: ProjectIdentity, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Project> {
        const response = await this.createProjectRaw({ ProjectIdentity: ProjectIdentity }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specified project.
     * Delete a project.
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.project_id === null || requestParameters.project_id === undefined) {
            throw new runtime.RequiredError('project_id','Required parameter requestParameters.project_id was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["project:write"]);
        }

        const response = await this.request({
            path: `/v2/manage/projects/{project_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.project_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specified project.
     * Delete a project.
     */
    async deleteProject(project_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectRaw({ project_id: project_id }, initOverrides);
    }

    /**
     * Get details about a given project.
     * Get a project\'s details.
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Project>> {
        if (requestParameters.project_id === null || requestParameters.project_id === undefined) {
            throw new runtime.RequiredError('project_id','Required parameter requestParameters.project_id was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["project:read"]);
        }

        const response = await this.request({
            path: `/v2/manage/projects/{project_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.project_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Get details about a given project.
     * Get a project\'s details.
     */
    async getProject(project_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Project> {
        const response = await this.getProjectRaw({ project_id: project_id }, initOverrides);
        return await response.value();
    }

    /**
     * List all projects you have access to.
     * List your projects.
     */
    async listProjectsRaw(requestParameters: ListProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Array<Project>>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["project:read"]);
        }

        const response = await this.request({
            path: `/v2/manage/projects/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectFromJSON));
    }

    /**
     * List all projects you have access to.
     * List your projects.
     */
    async listProjects(search?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Array<Project>> {
        const response = await this.listProjectsRaw({ search: search }, initOverrides);
        return await response.value();
    }

    /**
     * Update details of a specified project.
     * Update a project.
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Project>> {
        if (requestParameters.project_id === null || requestParameters.project_id === undefined) {
            throw new runtime.RequiredError('project_id','Required parameter requestParameters.project_id was null or undefined when calling updateProject.');
        }

        if (requestParameters.ProjectIdentity === null || requestParameters.ProjectIdentity === undefined) {
            throw new runtime.RequiredError('ProjectIdentity','Required parameter requestParameters.ProjectIdentity was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["project:write"]);
        }

        const response = await this.request({
            path: `/v2/manage/projects/{project_id}/`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.project_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectIdentityToJSON(requestParameters.ProjectIdentity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * Update details of a specified project.
     * Update a project.
     */
    async updateProject(project_id: string, ProjectIdentity: ProjectIdentity, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Project> {
        const response = await this.updateProjectRaw({ project_id: project_id, ProjectIdentity: ProjectIdentity }, initOverrides);
        return await response.value();
    }

}
