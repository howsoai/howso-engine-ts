/**
 * Howso API
 * OpenAPI implementation for interacting with the Howso API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CaseCountResponse, CaseEditRequest, CaseRemoveRequest, Cases, CasesRequest } from "../models";
import {
  CaseCountResponseFromJSON,
  CaseEditRequestToJSON,
  CaseRemoveRequestToJSON,
  CasesFromJSON,
  CasesRequestToJSON,
} from "../models";

export interface EditCasesRequest {
  trainee_id: string;
  CaseEditRequest: CaseEditRequest;
}

export interface GetCasesRequest {
  trainee_id: string;
  CasesRequest?: CasesRequest;
}

export interface GetNumTrainingCasesRequest {
  trainee_id: string;
}

export interface RemoveCasesRequest {
  trainee_id: string;
  CaseRemoveRequest: CaseRemoveRequest;
}

/**
 *
 */
export class TraineeCaseOperationsApi extends runtime.BaseAPI {
  /**
   * Edits the specified cases from the model.
   * Edit one or more cases in a trainee.
   */
  async editCasesRaw(
    requestParameters: EditCasesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CaseCountResponse>> {
    if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
      throw new runtime.RequiredError(
        "trainee_id",
        "Required parameter requestParameters.trainee_id was null or undefined when calling editCases.",
      );
    }

    if (requestParameters.CaseEditRequest === null || requestParameters.CaseEditRequest === undefined) {
      throw new runtime.RequiredError(
        "CaseEditRequest",
        "Required parameter requestParameters.CaseEditRequest was null or undefined when calling editCases.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", [
        "trainee:write",
        "trainee:execute",
      ]);
    }

    const response = await this.request(
      {
        path: `/v2/trainee/{trainee_id}/cases/edit`.replace(
          `{${"trainee_id"}}`,
          encodeURIComponent(String(requestParameters.trainee_id)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CaseEditRequestToJSON(requestParameters.CaseEditRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CaseCountResponseFromJSON(jsonValue));
  }

  /**
   * Edits the specified cases from the model.
   * Edit one or more cases in a trainee.
   */
  async editCases(
    trainee_id: string,
    CaseEditRequest: CaseEditRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CaseCountResponse> {
    const response = await this.editCasesRaw(
      { trainee_id: trainee_id, CaseEditRequest: CaseEditRequest },
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get the case data from a trainee.  If session id is supplied, only data from the specified session will be returned in the order it was trained. If session id is not provided, retrieves all feature values for cases for all (unordered) sessions in the order they were trained within each session.
   * Get case data from a trainee
   */
  async getCasesRaw(
    requestParameters: GetCasesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Cases>> {
    if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
      throw new runtime.RequiredError(
        "trainee_id",
        "Required parameter requestParameters.trainee_id was null or undefined when calling getCases.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
    }

    const response = await this.request(
      {
        path: `/v2/trainee/{trainee_id}/cases`.replace(
          `{${"trainee_id"}}`,
          encodeURIComponent(String(requestParameters.trainee_id)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CasesRequestToJSON(requestParameters.CasesRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CasesFromJSON(jsonValue));
  }

  /**
   * Get the case data from a trainee.  If session id is supplied, only data from the specified session will be returned in the order it was trained. If session id is not provided, retrieves all feature values for cases for all (unordered) sessions in the order they were trained within each session.
   * Get case data from a trainee
   */
  async getCases(
    trainee_id: string,
    CasesRequest?: CasesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Cases> {
    const response = await this.getCasesRaw({ trainee_id: trainee_id, CasesRequest: CasesRequest }, initOverrides);
    return await response.value();
  }

  /**
   * Return the number of cases in a trainee.
   * Get the number of cases for a trainee
   */
  async getNumTrainingCasesRaw(
    requestParameters: GetNumTrainingCasesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CaseCountResponse>> {
    if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
      throw new runtime.RequiredError(
        "trainee_id",
        "Required parameter requestParameters.trainee_id was null or undefined when calling getNumTrainingCases.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
    }

    const response = await this.request(
      {
        path: `/v2/trainee/{trainee_id}/cases/count`.replace(
          `{${"trainee_id"}}`,
          encodeURIComponent(String(requestParameters.trainee_id)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CaseCountResponseFromJSON(jsonValue));
  }

  /**
   * Return the number of cases in a trainee.
   * Get the number of cases for a trainee
   */
  async getNumTrainingCases(
    trainee_id: string,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CaseCountResponse> {
    const response = await this.getNumTrainingCasesRaw({ trainee_id: trainee_id }, initOverrides);
    return await response.value();
  }

  /**
   * Remove the specified cases from the model.  WARNING -- if the number of cases to be removed meets or exceeds the number of cases in the trainee, all training cases will be removed.
   * Remove one or more cases from a trainee
   */
  async removeCasesRaw(
    requestParameters: RemoveCasesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CaseCountResponse>> {
    if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
      throw new runtime.RequiredError(
        "trainee_id",
        "Required parameter requestParameters.trainee_id was null or undefined when calling removeCases.",
      );
    }

    if (requestParameters.CaseRemoveRequest === null || requestParameters.CaseRemoveRequest === undefined) {
      throw new runtime.RequiredError(
        "CaseRemoveRequest",
        "Required parameter requestParameters.CaseRemoveRequest was null or undefined when calling removeCases.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.accessToken) {
      // oauth required
      headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", [
        "trainee:write",
        "trainee:execute",
      ]);
    }

    const response = await this.request(
      {
        path: `/v2/trainee/{trainee_id}/cases/remove`.replace(
          `{${"trainee_id"}}`,
          encodeURIComponent(String(requestParameters.trainee_id)),
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CaseRemoveRequestToJSON(requestParameters.CaseRemoveRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => CaseCountResponseFromJSON(jsonValue));
  }

  /**
   * Remove the specified cases from the model.  WARNING -- if the number of cases to be removed meets or exceeds the number of cases in the trainee, all training cases will be removed.
   * Remove one or more cases from a trainee
   */
  async removeCases(
    trainee_id: string,
    CaseRemoveRequest: CaseRemoveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CaseCountResponse> {
    const response = await this.removeCasesRaw(
      { trainee_id: trainee_id, CaseRemoveRequest: CaseRemoveRequest },
      initOverrides,
    );
    return await response.value();
  }
}
