/**
 * Howso API
 * OpenAPI implementation for interacting with the Howso API. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SessionIdentity,
} from '../models';
import {
    SessionIdentityFromJSON,
} from '../models';

export interface DeleteTraineeSessionRequest {
    trainee_id: string;
    session_id: string;
}

export interface GetTraineeSessionIndicesRequest {
    trainee_id: string;
    session_id: string;
}

export interface GetTraineeSessionTrainingIndicesRequest {
    trainee_id: string;
    session_id: string;
}

export interface GetTraineeSessionsRequest {
    trainee_id: string;
}

/**
 * 
 */
export class TraineeSessionManagementApi extends runtime.BaseAPI {

    /**
     * Remove the specified session from the trainee.
     * Remove session from trainee
     */
    async deleteTraineeSessionRaw(requestParameters: DeleteTraineeSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling deleteTraineeSession.');
        }

        if (requestParameters.session_id === null || requestParameters.session_id === undefined) {
            throw new runtime.RequiredError('session_id','Required parameter requestParameters.session_id was null or undefined when calling deleteTraineeSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:write", "trainee:execute"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/session/{session_id}`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))).replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.session_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove the specified session from the trainee.
     * Remove session from trainee
     */
    async deleteTraineeSession(trainee_id: string, session_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTraineeSessionRaw({ trainee_id: trainee_id, session_id: session_id }, initOverrides);
    }

    /**
     * Retrieves the session indices for the provided session.
     * Retrieves the session indices for the provided session.
     */
    async getTraineeSessionIndicesRaw(requestParameters: GetTraineeSessionIndicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Array<number>>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling getTraineeSessionIndices.');
        }

        if (requestParameters.session_id === null || requestParameters.session_id === undefined) {
            throw new runtime.RequiredError('session_id','Required parameter requestParameters.session_id was null or undefined when calling getTraineeSessionIndices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/session/{session_id}/indices`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))).replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.session_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves the session indices for the provided session.
     * Retrieves the session indices for the provided session.
     */
    async getTraineeSessionIndices(trainee_id: string, session_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Array<number>> {
        const response = await this.getTraineeSessionIndicesRaw({ trainee_id: trainee_id, session_id: session_id }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the session training indices for the provided session.
     * Retrieves the session training indices for the provided session.
     */
    async getTraineeSessionTrainingIndicesRaw(requestParameters: GetTraineeSessionTrainingIndicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Array<number>>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling getTraineeSessionTrainingIndices.');
        }

        if (requestParameters.session_id === null || requestParameters.session_id === undefined) {
            throw new runtime.RequiredError('session_id','Required parameter requestParameters.session_id was null or undefined when calling getTraineeSessionTrainingIndices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", []);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/session/{session_id}/training-indices`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))).replace(`{${"session_id"}}`, encodeURIComponent(String(requestParameters.session_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieves the session training indices for the provided session.
     * Retrieves the session training indices for the provided session.
     */
    async getTraineeSessionTrainingIndices(trainee_id: string, session_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Array<number>> {
        const response = await this.getTraineeSessionTrainingIndicesRaw({ trainee_id: trainee_id, session_id: session_id }, initOverrides);
        return await response.value();
    }

    /**
     * Get all the session IDs for this trainee.
     * Get all session IDs for a trainee
     */
    async getTraineeSessionsRaw(requestParameters: GetTraineeSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Array<SessionIdentity>>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling getTraineeSessions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/sessions`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SessionIdentityFromJSON));
    }

    /**
     * Get all the session IDs for this trainee.
     * Get all session IDs for a trainee
     */
    async getTraineeSessions(trainee_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Array<SessionIdentity>> {
        const response = await this.getTraineeSessionsRaw({ trainee_id: trainee_id }, initOverrides);
        return await response.value();
    }

}
