/**
 * Howso API
 * OpenAPI implementation for interacting with the Howso API. 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AsyncActionAccepted,
  CopyTraineeRequest,
  CreateTraineeActionAccepted,
  DestructTraineeResponse,
  RandomSeedRequest,
  TraceResponse,
  Trainee,
  TraineeAcquireResourcesRequest,
  TraineeCreateRequest,
  TraineeIdentity,
  TraineeRequest,
} from '../models';
import {
    AsyncActionAcceptedFromJSON,
    CopyTraineeRequestToJSON,
    CreateTraineeActionAcceptedFromJSON,
    DestructTraineeResponseFromJSON,
    RandomSeedRequestToJSON,
    TraceResponseFromJSON,
    TraineeFromJSON,
    TraineeAcquireResourcesRequestToJSON,
    TraineeCreateRequestToJSON,
    TraineeIdentityFromJSON,
    TraineeRequestToJSON,
} from '../models';

export interface AcquireTraineeResourcesRequest {
    trainee_id: string;
    TraineeAcquireResourcesRequest?: TraineeAcquireResourcesRequest;
}

export interface CopyTraineeOperationRequest {
    trainee_id: string;
    CopyTraineeRequest?: CopyTraineeRequest;
}

export interface CreateTraineeRequest {
    TraineeCreateRequest: TraineeCreateRequest;
}

export interface DeleteTraineeRequest {
    trainee_id: string;
}

export interface DestructTraineeRequest {
    trainee_id: string;
    force?: boolean;
}

export interface GetTraineeRequest {
    trainee_id: string;
}

export interface ListTraineesRequest {
    search?: string;
    project?: string;
}

export interface PersistTraceRequest {
    trainee_id: string;
}

export interface PersistTraineeRequest {
    trainee_id: string;
}

export interface ReleaseTraineeResourcesRequest {
    trainee_id: string;
}

export interface ResolveTraineeRequest {
    name: string;
    project?: string;
}

export interface SelfDestructTraineeRequest {
    trainee_id: string;
}

export interface SetRandomSeedRequest {
    trainee_id: string;
    RandomSeedRequest: RandomSeedRequest;
}

export interface SetTraineeRequest {
    trainee_id: string;
    TraineeRequest: TraineeRequest;
}

/**
 * 
 */
export class TraineeManagementApi extends runtime.BaseAPI {

    /**
     * Acquire resources for the requested Trainee and wait for them to become available.
     * Acquire Trainee resources
     */
    async acquireTraineeResourcesRaw(requestParameters: AcquireTraineeResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| AsyncActionAccepted>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling acquireTraineeResources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:execute"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/resources/acquire`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TraineeAcquireResourcesRequestToJSON(requestParameters.TraineeAcquireResourcesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AsyncActionAcceptedFromJSON(jsonValue));
    }

    /**
     * Acquire resources for the requested Trainee and wait for them to become available.
     * Acquire Trainee resources
     */
    async acquireTraineeResources(trainee_id: string, TraineeAcquireResourcesRequest?: TraineeAcquireResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| AsyncActionAccepted> {
        const response = await this.acquireTraineeResourcesRaw({ trainee_id: trainee_id, TraineeAcquireResourcesRequest: TraineeAcquireResourcesRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new trainee as a copy of this trainee.
     * Copy Trainee
     */
    async copyTraineeRaw(requestParameters: CopyTraineeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Trainee>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling copyTrainee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read", "trainee:write"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/copy`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTraineeRequestToJSON(requestParameters.CopyTraineeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TraineeFromJSON(jsonValue));
    }

    /**
     * Create a new trainee as a copy of this trainee.
     * Copy Trainee
     */
    async copyTrainee(trainee_id: string, CopyTraineeRequest?: CopyTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Trainee> {
        const response = await this.copyTraineeRaw({ trainee_id: trainee_id, CopyTraineeRequest: CopyTraineeRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Create the specified trainee.
     * Create Trainee
     */
    async createTraineeRaw(requestParameters: CreateTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| CreateTraineeActionAccepted>> {
        if (requestParameters.TraineeCreateRequest === null || requestParameters.TraineeCreateRequest === undefined) {
            throw new runtime.RequiredError('TraineeCreateRequest','Required parameter requestParameters.TraineeCreateRequest was null or undefined when calling createTrainee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:write"]);
        }

        const response = await this.request({
            path: `/v2/trainees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TraineeCreateRequestToJSON(requestParameters.TraineeCreateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTraineeActionAcceptedFromJSON(jsonValue));
    }

    /**
     * Create the specified trainee.
     * Create Trainee
     */
    async createTrainee(TraineeCreateRequest: TraineeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| CreateTraineeActionAccepted> {
        const response = await this.createTraineeRaw({ TraineeCreateRequest: TraineeCreateRequest }, initOverrides);
        return await response.value();
    }

    /**
     * Delete the trainee.
     * Delete Trainee
     */
    async deleteTraineeRaw(requestParameters: DeleteTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling deleteTrainee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:write"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the trainee.
     * Delete Trainee
     */
    async deleteTrainee(trainee_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTraineeRaw({ trainee_id: trainee_id }, initOverrides);
    }

    /**
     * The system will forcibly teardown the trainee instance (for testing only).
     * Teardown a trainee instance
     */
    async destructTraineeRaw(requestParameters: DestructTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| DestructTraineeResponse>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling destructTrainee.');
        }

        const queryParameters: any = {};

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:write", "trainee:execute"]);
        }

        const response = await this.request({
            path: `/v2/internal/trainee/{trainee_id}/destruct`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestructTraineeResponseFromJSON(jsonValue));
    }

    /**
     * The system will forcibly teardown the trainee instance (for testing only).
     * Teardown a trainee instance
     */
    async destructTrainee(trainee_id: string, force?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| DestructTraineeResponse> {
        const response = await this.destructTraineeRaw({ trainee_id: trainee_id, force: force }, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves trainee data by id.
     * Get Trainee
     */
    async getTraineeRaw(requestParameters: GetTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Trainee>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling getTrainee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TraineeFromJSON(jsonValue));
    }

    /**
     * Retrieves trainee data by id.
     * Get Trainee
     */
    async getTrainee(trainee_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Trainee> {
        const response = await this.getTraineeRaw({ trainee_id: trainee_id }, initOverrides);
        return await response.value();
    }

    /**
     * List all trainees you have access to.
     * List your trainees.
     */
    async listTraineesRaw(requestParameters: ListTraineesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Array<TraineeIdentity>>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/manage/trainees/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TraineeIdentityFromJSON));
    }

    /**
     * List all trainees you have access to.
     * List your trainees.
     */
    async listTrainees(search?: string, project?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Array<TraineeIdentity>> {
        const response = await this.listTraineesRaw({ search: search, project: project }, initOverrides);
        return await response.value();
    }

    /**
     * Persist the trainee\'s trace to server storage.
     * Persist trainee trace
     */
    async persistTraceRaw(requestParameters: PersistTraceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| TraceResponse>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling persistTrace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read", "trainee:execute"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/persist-trace`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TraceResponseFromJSON(jsonValue));
    }

    /**
     * Persist the trainee\'s trace to server storage.
     * Persist trainee trace
     */
    async persistTrace(trainee_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| TraceResponse> {
        const response = await this.persistTraceRaw({ trainee_id: trainee_id }, initOverrides);
        return await response.value();
    }

    /**
     * Persist the trainee to server storage.
     * Persist trainee
     */
    async persistTraineeRaw(requestParameters: PersistTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling persistTrainee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:write"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/persist`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Persist the trainee to server storage.
     * Persist trainee
     */
    async persistTrainee(trainee_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.persistTraineeRaw({ trainee_id: trainee_id }, initOverrides);
    }

    /**
     * Releases the requested Trainee\'s resources.
     * Release Trainee resources
     */
    async releaseTraineeResourcesRaw(requestParameters: ReleaseTraineeResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling releaseTraineeResources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:execute"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/resources/release`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Releases the requested Trainee\'s resources.
     * Release Trainee resources
     */
    async releaseTraineeResources(trainee_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.releaseTraineeResourcesRaw({ trainee_id: trainee_id }, initOverrides);
    }

    /**
     * Lookup a trainee by name.
     */
    async resolveTraineeRaw(requestParameters: ResolveTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| TraineeIdentity>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling resolveTrainee.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:read"]);
        }

        const response = await this.request({
            path: `/v2/manage/trainees/resolve/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TraineeIdentityFromJSON(jsonValue));
    }

    /**
     * Lookup a trainee by name.
     */
    async resolveTrainee(name: string, project?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| TraineeIdentity> {
        const response = await this.resolveTraineeRaw({ name: name, project: project }, initOverrides);
        return await response.value();
    }

    /**
     * The trainee will \"unexpectedly\" fail (for testing only).
     * Unexpectedly fail a trainee
     */
    async selfDestructTraineeRaw(requestParameters: SelfDestructTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling selfDestructTrainee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:write", "trainee:execute"]);
        }

        const response = await this.request({
            path: `/v2/internal/trainee/{trainee_id}/destruct`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The trainee will \"unexpectedly\" fail (for testing only).
     * Unexpectedly fail a trainee
     */
    async selfDestructTrainee(trainee_id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.selfDestructTraineeRaw({ trainee_id: trainee_id }, initOverrides);
    }

    /**
     * Set the random seed on a trainee for reproducibility of randomized results. If \'seed\' is not provided in the request body, one will be randomly generated.
     * Set Trainee\'s random seed
     */
    async setRandomSeedRaw(requestParameters: SetRandomSeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling setRandomSeed.');
        }

        if (requestParameters.RandomSeedRequest === null || requestParameters.RandomSeedRequest === undefined) {
            throw new runtime.RequiredError('RandomSeedRequest','Required parameter requestParameters.RandomSeedRequest was null or undefined when calling setRandomSeed.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:write"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}/random-seed`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RandomSeedRequestToJSON(requestParameters.RandomSeedRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set the random seed on a trainee for reproducibility of randomized results. If \'seed\' is not provided in the request body, one will be randomly generated.
     * Set Trainee\'s random seed
     */
    async setRandomSeed(trainee_id: string, RandomSeedRequest: RandomSeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setRandomSeedRaw({ trainee_id: trainee_id, RandomSeedRequest: RandomSeedRequest }, initOverrides);
    }

    /**
     * Set the specified trainee attributes features.
     * Set Trainee
     */
    async setTraineeRaw(requestParameters: SetTraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<| Trainee>> {
        if (requestParameters.trainee_id === null || requestParameters.trainee_id === undefined) {
            throw new runtime.RequiredError('trainee_id','Required parameter requestParameters.trainee_id was null or undefined when calling setTrainee.');
        }

        if (requestParameters.TraineeRequest === null || requestParameters.TraineeRequest === undefined) {
            throw new runtime.RequiredError('TraineeRequest','Required parameter requestParameters.TraineeRequest was null or undefined when calling setTrainee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth_ums", ["trainee:write"]);
        }

        const response = await this.request({
            path: `/v2/trainee/{trainee_id}`.replace(`{${"trainee_id"}}`, encodeURIComponent(String(requestParameters.trainee_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TraineeRequestToJSON(requestParameters.TraineeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TraineeFromJSON(jsonValue));
    }

    /**
     * Set the specified trainee attributes features.
     * Set Trainee
     */
    async setTrainee(trainee_id: string, TraineeRequest: TraineeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<| Trainee> {
        const response = await this.setTraineeRaw({ trainee_id: trainee_id, TraineeRequest: TraineeRequest }, initOverrides);
        return await response.value();
    }

}
