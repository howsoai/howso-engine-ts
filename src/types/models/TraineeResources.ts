/**
 * Howso API
 * OpenAPI implementation for interacting with the Howso API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from "../runtime";
import type { CPULimits } from "./CPULimits";
import { CPULimitsFromJSON, CPULimitsToJSON } from "./CPULimits";
import type { MemoryLimits } from "./MemoryLimits";
import { MemoryLimitsFromJSON, MemoryLimitsToJSON } from "./MemoryLimits";

/**
 * The alloted resources for a Trainee.
 * @export
 * @interface TraineeResources
 */
export interface TraineeResources {
  /**
   *
   * @type {CPULimits}
   * @memberof TraineeResources
   */
  cpu?: CPULimits;
  /**
   *
   * @type {MemoryLimits}
   * @memberof TraineeResources
   */
  memory?: MemoryLimits;
  /**
   * The number of compute instance replicas to create.
   * @type {number}
   * @memberof TraineeResources
   */
  replicas?: number;
}

/**
 * Check if a given object implements the TraineeResources interface.
 */
export function instanceOfTraineeResources(value: object): boolean {
  const isInstance = true;

  return isInstance;
}

export function TraineeResourcesFromJSON(json: any): TraineeResources {
  return TraineeResourcesFromJSONTyped(json, false);
}

export function TraineeResourcesFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraineeResources {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    cpu: !exists(json, "cpu") ? undefined : CPULimitsFromJSON(json["cpu"]),
    memory: !exists(json, "memory") ? undefined : MemoryLimitsFromJSON(json["memory"]),
    replicas: !exists(json, "replicas") ? undefined : json["replicas"],
  };
}

export function TraineeResourcesToJSON(value?: TraineeResources | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    cpu: CPULimitsToJSON(value.cpu),
    memory: MemoryLimitsToJSON(value.memory),
    replicas: value.replicas,
  };
}
