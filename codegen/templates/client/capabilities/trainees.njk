/**
 * NOTE: This file is auto generated, do not modify manually.
 */
import type { Trainee, Session } from "@/types";
import type * as schemas from "@/types/schemas";
import { AbstractHowsoClient } from "../base";

export interface LabelResponse<R = unknown> {
  payload: R;
  warnings: string[];
}

export abstract class TraineeClient extends AbstractHowsoClient {
  /** Create a new Trainee. */
  public abstract createTrainee(trainee: Omit<Trainee, "id">): Promise<Trainee>;

  /** Update an existing Trainee. */
  public abstract updateTrainee(trainee: Trainee): Promise<Trainee>;

  /** Copy an existing Trainee. */
  public abstract copyTrainee(traineeId: string, name?: string): Promise<Trainee>;

  /** Get an existing Trainee by Id. */
  public abstract getTrainee(traineeId: string): Promise<Trainee>;

  /** Search existing Trainees. */
  public abstract queryTrainees(keywords: string | string[]): Promise<Trainee[]>;

  /** Delete a Trainee. */
  public abstract deleteTrainee(traineeId: string): Promise<void>;

  /** Acquire the resources for a Trainee. */
  public abstract acquireTraineeResources(traineeId: string): Promise<void>;

  /** Release the resources for a Trainee. */
  public abstract releaseTraineeResources(traineeId: string): Promise<void>;

  /** Persist a Trainee to storage. **/
  public abstract persistTrainee(traineeId: string): Promise<void>;

  /** Automatically resolve a Trainee and ensure it is loaded. */
  protected abstract autoResolveTrainee(traineeId: string): Promise<Trainee>;

  /** Automatically persist Trainee object when appropriate based on persistence level. */
  protected abstract autoPersistTrainee(traineeId: string): Promise<void>;

  /** Get active Session. */
  public abstract getActiveSession(): Promise<Readonly<Session>>;

  /** Begin a new Session. */
  public abstract beginSession(name?: string, metadata?: Record<string, any>): Promise<Session>;
{% for label, def in labels | dictsort %}
{% set requestName = "schemas." + label | pascalCase + "Request" %}
{% set responseName = "schemas." + label | pascalCase + "Response" %}
  /**
   * {{ def.description | capitalize | blockComment | safe | indent(2) }}
   * @param traineeId The Trainee identifier.
   * @param request The operation parameters.
   * @returns The response of the operation, including any warnings.
   */
  public async {{ label | camelCase }}(traineeId: string{% if def.parameters %}, request: {{ requestName }}{% endif %}): Promise<LabelResponse<{% if def.returns %}{{ responseName }}{% else %}any{% endif %}>> {
    const trainee = await this.autoResolveTrainee(traineeId);
    const response = await this.execute<{% if def.returns %}{{ responseName }}{% else %}any{% endif %}>(trainee.id, "{{ label }}", {% if def.parameters %}request{% else %}{}{% endif %});
    {%- if not def.read_only %}
    this.autoPersistTrainee(trainee.id);
    {%- endif %}
    return { payload: response.payload, warnings: response.warnings };
  }
{%- if not loop.last %}
{% endif %}
{%- endfor %}
}